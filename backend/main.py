from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List
from datetime import datetime
from google import genai
from google.genai import types
import os
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.py
try:
    from config import API_KEY, USE_CUSTOM_ENDPOINT, CUSTOM_API_URL, MODEL_NAME
except ImportError:
    raise Exception(
        "–§–∞–π–ª config.py –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–π!\n"
        "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª backend/config.py —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:\n"
        "  API_KEY = 'your-api-key'\n"
        "  USE_CUSTOM_ENDPOINT = False  # True –¥–ª—è custom endpoint\n"
        "  CUSTOM_API_URL = 'https://hubai.loe.gg'  # URL custom endpoint\n"
        "  MODEL_NAME = 'gemini-2.0-flash-lite'  # –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏"
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Genai –∫–ª–∏–µ–Ω—Ç
if USE_CUSTOM_ENDPOINT:
    print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è custom endpoint: {CUSTOM_API_URL}")
    genai_client = genai.Client(
        api_key=API_KEY,
        http_options=types.HttpOptions(base_url=CUSTOM_API_URL)
    )
else:
    print("üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Google API endpoint")
    genai_client = genai.Client(api_key=API_KEY)

app = FastAPI(title="Respondo Backend")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
SYSTEM_PROMPT = None


def load_system_prompt(prompt_file: str = "prompts/system_prompt.txt") -> str:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞.
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–Ω—É—Ç—Ä–∏ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫ {}.
    –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.
    
    Args:
        prompt_file: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø—Ä–æ–º–ø—Ç–æ–º
    
    Returns:
        str: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫
    """
    try:
        prompt_path = Path(__file__).parent / prompt_file
        with open(prompt_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—â–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–∂–¥—É { –∏ }
        import re
        match = re.search(r'\{(.*?)\}', content, re.DOTALL)
        
        if match:
            prompt = match.group(1).strip()
            print(f"‚úÖ –ü—Ä–æ–º–ø—Ç –∏–∑–≤–ª–µ—á—ë–Ω –∏–∑ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫")
            return prompt
        else:
            print(f"‚ö†Ô∏è  –§–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ—Å—å —Ñ–∞–π–ª –∫–∞–∫ –ø—Ä–æ–º–ø—Ç.")
            return content.strip()
            
    except FileNotFoundError:
        print(f"‚ö†Ô∏è  –§–∞–π–ª {prompt_file} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç.")
        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        return """–¢—ã - —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ —Å —É—á—ë—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–º–µ—Å—Ç–Ω—ã–π, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.

–í–†–ï–ú–ï–ù–ù–û–ô –ö–û–ù–¢–ï–ö–°–¢:
- –û–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º—è –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
- –î–æ–ª–≥–∏–µ –ø–∞—É–∑—ã (–Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤/–¥–Ω–µ–π) –º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –≤–µ–∂–ª–∏–≤–æ–≥–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
- –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –±–µ—Å–µ–¥—É
- –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–∞–≤–Ω–æ, —É—á—Ç–∏ —ç—Ç–æ –≤ —Ç–æ–Ω–µ –æ—Ç–≤–µ—Ç–∞

–ü–†–ê–í–ò–õ–ê:
- –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, —á—Ç–æ –∏ –¥–∏–∞–ª–æ–≥
- –°–æ—Ö—Ä–∞–Ω—è–π —Ç–æ–Ω –∏ —Å—Ç–∏–ª—å –±–µ—Å–µ–¥—ã (—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π/–Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π)
- –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É
- –û—Ç–≤–µ—á–∞–π –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
- –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π —É–∂–µ —Å–∫–∞–∑–∞–Ω–Ω–æ–µ
- –ë—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–ü—Ä–µ–¥–ª–æ–∂–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("startup")
async def startup_event():
    global SYSTEM_PROMPT
    SYSTEM_PROMPT = load_system_prompt()
    print("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω")
    print(f"üìù –î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: {len(SYSTEM_PROMPT)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: {MODEL_NAME}")
    if USE_CUSTOM_ENDPOINT:
        print(f"üîó Custom API endpoint: {CUSTOM_API_URL}")
    else:
        print(f"üîó Standard Google API endpoint")


class Message(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ"""
    author: str  # –ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª
    timestamp: str  # –ö–æ–≥–¥–∞ –Ω–∞–ø–∏—Å–∞–ª (ISO —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞)
    content: str  # –ß—Ç–æ –Ω–∞–ø–∏—Å–∞–ª


class DialogRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–∏–∞–ª–æ–≥–æ–º"""
    messages: List[Message]
    context: str = ""  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)


class DialogResponse(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
    suggested_reply: str
    processing_time: float


@app.get("/")
async def root():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return {
        "status": "ok",
        "service": "Respondo Backend",
        "version": "2.1.0",
        "prompt_loaded": SYSTEM_PROMPT is not None,
        "model": MODEL_NAME,
        "endpoint_type": "custom" if USE_CUSTOM_ENDPOINT else "standard",
        "api_endpoint": CUSTOM_API_URL if USE_CUSTOM_ENDPOINT else "api.google.com"
    }


@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy"}


@app.post("/reload-prompt")
async def reload_prompt():
    """
    –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    """
    global SYSTEM_PROMPT
    SYSTEM_PROMPT = load_system_prompt()
    return {
        "status": "success",
        "message": "–ü—Ä–æ–º–ø—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω",
        "prompt_length": len(SYSTEM_PROMPT)
    }


@app.post("/api/suggest-reply", response_model=DialogResponse)
async def suggest_reply(request: DialogRequest):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –¥–∏–∞–ª–æ–≥
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ LLM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    """
    start_time = datetime.now()
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
        dialog_text = format_dialog_with_time_analysis(request.messages)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM API
        llm_response = await call_llm_api(dialog_text, request.context)
        
        processing_time = (datetime.now() - start_time).total_seconds()
        
        return DialogResponse(
            suggested_reply=llm_response,
            processing_time=processing_time
        )
    
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
        )


def parse_timestamp(timestamp_str: str) -> datetime:
    """
    –ü–∞—Ä—Å–∏—Ç timestamp –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    """
    # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ISO —Ñ–æ—Ä–º–∞—Ç
    try:
        return datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
    except:
        pass
    
    # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
    formats = [
        "%Y-%m-%d %H:%M:%S",
        "%d.%m.%Y %H:%M",
        "%H:%M",
    ]
    
    for fmt in formats:
        try:
            return datetime.strptime(timestamp_str, fmt)
        except:
            continue
    
    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    return datetime.now()


def analyze_time_gaps(messages: List[Message]) -> str:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    """
    if len(messages) < 2:
        return "–î–∏–∞–ª–æ–≥ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—Å—è."
    
    try:
        timestamps = [parse_timestamp(msg.timestamp) for msg in messages]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫
        last_gap = timestamps[-1] - timestamps[-2]
        total_duration = timestamps[-1] - timestamps[0]
        
        analysis = []
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞
        if last_gap.total_seconds() < 60:
            analysis.append("–ê–∫—Ç–∏–≤–Ω–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞ (–æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã)")
        elif last_gap.total_seconds() < 3600:
            minutes = int(last_gap.total_seconds() / 60)
            analysis.append(f"–ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ ({minutes} –º–∏–Ω)")
        elif last_gap.total_seconds() < 86400:
            hours = int(last_gap.total_seconds() / 3600)
            analysis.append(f"–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ ({hours} —á)")
        else:
            days = int(last_gap.total_seconds() / 86400)
            analysis.append(f"–î–æ–ª–≥–∞—è –ø–∞—É–∑–∞ ({days} –¥–Ω)")
        
        # –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∏–∞–ª–æ–≥–∞
        if total_duration.total_seconds() < 3600:
            analysis.append("–ë—ã—Å—Ç—Ä–∞—è –±–µ—Å–µ–¥–∞")
        elif total_duration.total_seconds() < 86400:
            analysis.append("–î–∏–∞–ª–æ–≥ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è")
        else:
            analysis.append("–î–æ–ª–≥–∏–π –¥–∏–∞–ª–æ–≥")
        
        return " | ".join(analysis)
    
    except:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏"


def format_dialog_with_time_analysis(messages: List[Message]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤—Ä–µ–º–µ–Ω–∏
    """
    dialog_lines = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤
    time_analysis = analyze_time_gaps(messages)
    dialog_lines.append(f"=== –í–†–ï–ú–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–ó ===")
    dialog_lines.append(time_analysis)
    dialog_lines.append(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
    dialog_lines.append("")
    dialog_lines.append("=== –ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê ===")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    for i, msg in enumerate(messages):
        prefix = "‚îî‚îÄ" if i == len(messages) - 1 else "‚îú‚îÄ"
        dialog_lines.append(f"{prefix} [{msg.timestamp}] {msg.author}: {msg.content}")
    
    return "\n".join(dialog_lines)


async def call_llm_api(dialog: str, context: str = "") -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Gemini API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    """
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    system_instruction = SYSTEM_PROMPT
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
    if context:
        system_instruction += f"\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {context}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    full_prompt = f"""{system_instruction}

{dialog}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –≤—ã—à–µ (–æ–±—Ä–∞—Ç–∏ –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑) –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Google Genai SDK
        response = genai_client.models.generate_content(
            model=MODEL_NAME,
            contents=full_prompt
        )
        
        return response.text.strip()
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Gemini API: {str(e)}"
        )


@app.post("/api/test")
async def test_endpoint(request: DialogRequest):
    """
    –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ LLM
    """
    dialog_text = format_dialog_with_time_analysis(request.messages)
    time_analysis = analyze_time_gaps(request.messages)
    
    return {
        "formatted_dialog": dialog_text,
        "time_analysis": time_analysis,
        "message_count": len(request.messages),
        "system_prompt_length": len(SYSTEM_PROMPT) if SYSTEM_PROMPT else 0,
        "test_reply": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç. LLM –Ω–µ –≤—ã–∑—ã–≤–∞–ª—Å—è."
    }


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)